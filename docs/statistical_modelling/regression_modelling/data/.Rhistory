?apply()
?seq
n = seq(0,17,1)
n
x = seq(-20, 20, len=1000)
for (i in x){
for (j in n){
y = sum((-1)^j * i^(2j+1) / factorial(2j+1))
for (i in x){
for (j in n){
c = 2j+1
c = 2j + 1,
for (i in x){
for (i in n){
y = (-1)^j * i^(2j+1) / factorial(2j+1))
for (i in x){
for (j in n){
y = (-1)^j * i^(2j+1) / factorial(2j+1))
y = ((-1)^j) * (i^(2j+1)) / factorial(2j+1))
z <- numeric(length(x))  # initialize z to a vector of zeros
for (j in n) {
y <- ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
z <- z + y  # accumulate the sum of each iteration of y into z
}
# print the final values of x and z
print(cbind(x, z))
n <- seq(0, 2, 1)
z <- numeric(length(x))  # initialize z to a vector of zeros
for (j in n) {
y <- ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
z <- z + y  # accumulate the sum of each iteration of y into z
}
# print the final values of x and z
print(cbind(x, z))
# print the final values of x and z
data = cbind(x, z)
View(data)
n <- seq(0, 17, 1)
x <- seq(-20, 20, len = 1000)
z <- numeric(length(x))  # initialize z to a vector of zeros
for (j in n) {
y <- ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
z <- z + y  # accumulate the sum of each iteration of y into z
}
# print the final values of x and z
data = cbind(x, z)
?plot
plot(cbind(x, z))
plot(cbind(x, z),type = 'l', lwd =2, xlim = c(-20,20), ylim= c(-2,2))
n <- seq(0, 17, 1)
x <- seq(-20, 20, len = 1000)
for (j in n) {
z <- ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
y <- sum(z)
}
# print the final values of x and z
data = cbind(x, y)
View(data)
plot(cbind(x, y),type = 'l', lwd =2, xlim = c(-20,20), ylim= c(-2,2))
y = 0
for (j in n) {
y <- y + ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
}
plot(cbind(x, y),type = 'l', lwd =2, xlim = c(-20,20), ylim= c(-2,2))
n <- seq(0, 17, 1)
x <- seq(-20, 20, len = 1000)
y = 0
for (j in n) {
y <- y + ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
}
n <- seq(0, 17, 1)
x <- seq(-20, 20, len = 1000)
y <- sapply(x, function(i) {
sum(((1:-1)^n) * (i^(2*n+1)) / factorial(2*n+1))
})
# print the final values of x and y
data <- cbind(x, y)
print(data)
n <- seq(0, 17, 1)
x <- seq(-20, 20, len = 1000)
y = 0
for (j in n) {
y <- y + ((-1)^j) * (x^(2*j+1)) / factorial(2*j+1)
}
plot(c(x, y),type = 'l', lwd =2, xlim = c(-20,20), ylim= c(-2,2))
# print the final values of x and z
df <- data.frame()
df$x <- x
View(data)
View(df)
plot(cbind(x, y),type = 'l', lwd =2, xlim = c(-20,20), ylim= c(-2,2))
library(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
alert <- c("red", "yellow", "green")
factor(alert, levels = c("green", "yellow", "red"), ordered=TRUE)
alert
library(lubridate)
parse_date_time("18 15-04-2020", "H dmy")
library(purrr)
data <- list(x = 1:3, y = 4:5, z = 10:15)
lengths <- map_int(data, ~ length(.x))
print(lengths)
install.packages(
"https://www.well.ox.ac.uk/bioinformatics/training/gms/code/R/gmsgff.tgz",
repos = NULL,
type = "source"
)
installed_packages <- installed.packages()[, "Package"]
save(installed_packages, file = "packages_list.RData")
load("packages_list.RData")
install.packages(installed_packages)
install.packages(installed_packages)
install.packages(installed_packages)
install.packages(installed_packages)
install.packages(installed_packages)
install.packages("tidyverse")
.libPaths()
.libPaths()
lib.path()
lib.Path()
lib.Patha()
lib.Pats()
lib.Paths()
lib.Paths
setwd("D:/OneDrive - Queen Mary, University of London/4. Self-learning/WHG training/whg-training-resources-replicate/docs/statistical_modelling/regression_modelling/data")
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
library(tidyverse)
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
setwd("D:/OneDrive - Queen Mary, University of London/4. Self-learning/WHG training/whg-training-resources-replicate/docs/statistical_modelling/regression_modelling/data")
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
library(tidyverse)
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
library(tidyverse)
setwd("D:/OneDrive - Queen Mary, University of London/4. Self-learning/WHG training/whg-training-resources-replicate/docs/statistical_modelling/regression_modelling/data")
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
library(rprojroot)
library(rprojroot)
knitr::opts_knit$set(root.dir = "D:/OneDrive - Queen Mary, University of London/4. Self-learning/WHG training/whg-training-resources-replicate/docs/statistical_modelling/regression_modelling/data")
library(tidyverse)
data = read_delim( "o_bld_group_data.tsv", delim = "\t" )
view(data)
head(data)
summary(data)
data %>% group_by(country) %>% summarise(rs8176719)
data %>% summarise(rs8176719)
data %>% count(rs8176719 == `-/-`)
data %>% count(rs8176719 == "-/-")
data %>% group_by(country) %>% count(rs8176719 == "-/-")
data %>% group_by(country) %>% summarise(rs8176719 == "-/-")
data %>% group_by(country) %>% sum(rs8176719 == "-/-")
data %>% group_by(country) %>% count (rs8176719 == "-/-")
data %>% group_by(country) %>% summarise(
o_blood_group_frequency = sum(rs8176719 == "-/-") / n()
)
data %>% group_by(country) %>% summarise(
o_blood_group_frequency = count(rs8176719 == "-/-") / n()
)
data %>% group_by(country) %>% summarise(
count(rs8176719 == "-/-")
)
data %>% group_by(country) %>%
count(rs8176719 == "-/-")
sum(data$rs8176719 == "-/-")
sum(data$rs8176719 == "-/-")
data %>% group_by(country) %>%
count(rs8176719 == "-/-")
sum(data$rs8176719 == "-/-", na.rm = TRUE)
data %>% group_by(country) %>%
summarise(sum(rs8176719 == "-/-"), na.rm = TRUE)
data %>% group_by(country) %>%
summarise(sum(rs8176719 == "-/-", na.rm = TRUE))
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE), o-bld_freq = n / n())
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE))
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE), n/n())
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE), n/n()*100)
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE), frequency = n/n()*100)
data %>% group_by(country) %>%
summarise(n = sum(rs8176719 == "-/-", na.rm = TRUE), o_bld_freq = n/n()*100)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% n()
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(n())
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(rs8176746)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% as.factor(rs8176746) %>% summarise(rs8176746)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n()
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n(data) *100
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / 10916 *100
)
data$o_bld_group = NA           # in case any rs8176719 genotypes are missing
data$o_bld_group[ data$rs8176719 == '-/-' ] = 1
data$o_bld_group[ data$rs8176719 == '-/C' ] = 0
data$o_bld_group[ data$rs8176719 == 'C/C' ] = 0
data$status = factor( data$status, levels = c( "CONTROL", "CASE" ))
fit = glm(
status ~ o_bld_group,
data = data,
family = "binomial"  # needed to specify logistic regression
)
summary(fit)$coeff
-0.3342393/0.03889801
fit2 = glm(
status ~ o_bld_group + country,
data = data,
family = "binomial"  # needed to specify logistic regression
)
summary(fit2)$coeff
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
) %>% sort(b_bld_freq)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = sort(n / n() *100)
)
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
) %>% arrange(desc(b_bld_freq))
) %>% arrange(desc(b_bld_freq))
data %>% filter(rs8176719 != "-/-") %>%
group_by(country) %>% summarise(
n = sum(str_detect(rs8176746, "T"), na.rm = TRUE),
b_bld_freq = n / n() *100
) %>% arrange(desc(b_bld_freq))
summary(fit2)$coeff
data$country = factor(
data$country,
levels = c(
"Gambia",
"Ghana",
"Cameroon",
"Tanzania",
"Kenya"
)
)
summary(fit2)$coeff
fit2
summary(fit2)$coeff
fit2
summary(fit2)$coeff
fit2 = glm(
status ~ o_bld_group + country,
data = data,
family = "binomial"  # needed to specify logistic regression
)
summary(fit2)$coeff
fit3 = glm(
status ~ o_bld_group + country + ethnicity,
data = data,
family = "binomial"  # needed to specify logistic regression
)
summary(fit3)$coeff
distinct(data$ethnicity)
unique(data$ethnicity)
fit4 = glm(
status ~ o_bld_group + country + country * PC_1,
data = data,
family = "binomial"  # needed to specify logistic regression
)
summary(fit4)$coeff
logistic <- function(x) {
exp(x) / ( 1 + exp(x) )
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
probabiy = logistic(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ geom_vline( xintercept = 0, linetype = 2, col = 'red' )
)
logistic <- function(x) {
exp(x) / ( 1 + exp(x) )
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
y = logistic(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ geom_vline( xintercept = 0, linetype = 2, col = 'red' )
)
logistic <- function(x) {
exp(x) / ( 1 + exp(x) )
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
y = logistic(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ geom_vline( xintercept = 0, linetype = 2, col = 'red' )
)
?xlab
logistic <- function(x) {
exp(x) / ( 1 + exp(x) )
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
y = logistic(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ geom_vline( xintercept = 0, linetype = 2, col = 'red' ) +
xlab("logoddds") +
ylab("probability")
)
logit <- function(x) {
log(x/ (1-x))
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
y = logit(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ xlab("probability") +
ylab(logodds)
)
logit <- function(x) {
log(x/ (1-x))
}
x = seq( from= -6, to = 6, by = 0.01 )
plot_data = tibble(
x = x,
y = logit(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ xlab("probability") +
ylab("logodds")
)
logit <- function(x) {
log(x/ (1-x))
}
x = seq( from= 0, to = 1, by = 0.01 )
plot_data = tibble(
x = x,
y = logit(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ xlab("probability") +
ylab("logodds")
)
logit <- function(x) {
log(x/ (1-x))
}
x = seq( from= 0, to = 1, by = 0.0001 )
plot_data = tibble(
x = x,
y = logit(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ xlab("probability") +
ylab("logodds")
)
logit <- function(x) {
log(x/ (1-x))
}
x = seq( from= 0, to = 1, by = 0.001 )
plot_data = tibble(
x = x,
y = logit(x)
)
print(
ggplot( data = plot_data, aes( x = x, y = y ))
+ geom_line()
+ xlab("probability") +
ylab("logodds")
)
