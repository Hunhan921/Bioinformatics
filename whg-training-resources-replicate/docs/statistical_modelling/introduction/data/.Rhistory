per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
View(per_population_posterior)
per_population_posterior %>% group_by( population ) %>% summarise( number_of_rows = n() )
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid( population ~ . )
)
print(p)
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "O blood group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
oblood$O_bld_grp_frequency = oblood[['-/-']] / ( oblood[['C/C']] + oblood[['-/C']] + oblood[['-/-']])
ordered_populations = (
oblood
%>% arrange( O_bld_grp_frequency )
)$population
per_population_posterior$population = factor(
per_population_posterior$population,
levels = ordered_populations
)
str(oblood)
str(per_population_posterior)
print(p)
p
View(per_population_posterior)
View(oblood)
str(oblood)
oblood$population[which.min(oblood$O_bld_grp_frequency)]
oblood$population[which.max(oblood$O_bld_grp_frequency)]
p
?qbeta()
x <- seq(0, 1, length.out = 21)
qbeta(x, 1, 1)
qbeta(x, 1, 1, lower.tail = FALSE)
View(rs61028892)
str(rs61028892)
str(rs61028892)
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
lower = qbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = TRUE
)
upper = qbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = FALSE
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
View(population_data)
View(per_population_posterior)
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
log = TRUE
)
lower = qbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = TRUE,
log.p = TRUE
)
upper = qbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = FALSE,
log.p = TRUE
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
lower = lower,
upper = upper
)
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
)
lower = qbeta(
posterior_distribution,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = TRUE,
)
upper = qbeta(
posterior_distribution,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
lower.tail = FALSE,
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
)
# Add summary statistics
posterior_mean = shape1/(shape1 + shape2)
lower = qbeta(
0.025,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
upper = qbeta(
0.975,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
posterior_mean = posterior_mean,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
)
# Add summary statistics
posterior_mean = (row$alternate_count + 1)/((row$alternate_count + 1) + (row$reference_count + 1))
lower = qbeta(
0.025,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
upper = qbeta(
0.975,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
posterior_mean = posterior_mean,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
View(per_population_posterior)
p
str(rs61028892)
#Generate posterior with 95% CI
generate_posterior = function(
row,
at= seq( from = 0, to = 1, by = 0.0001 )
) {
posterior_distribution = dbeta(
at,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1,
)
# Add summary statistics
posterior_mean = (row$alternate_count + 1)/((row$alternate_count + 1) + (row$reference_count + 1))
lower = qbeta(
0.025,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
upper = qbeta(
0.975,
shape1 = row$alternate_count + 1,
shape2 = row$reference_count + 1
)
tibble(
population = row$population,
reference_count = row$reference_count,
alternative_count = row$alternate_count,
at = at,
value = posterior_distribution,
posterior_mean = posterior_mean,
lower = lower,
upper = upper
)
}
per_population_posterior= tibble()
for( i in 1:nrow( rs61028892)) {
# summarise one row, as before
population_data = (
rs61028892[i,]
%>%
summarise(
population = population,
reference_count = sum( rs61028892_0 + rs61028892_1 ),
alternate_count = sum( rs61028892_2 )
)
)
per_population_posterior = bind_rows(
per_population_posterior,
generate_posterior( population_data )
)
}
rs61028892$deletion_grp_frequency = rs61028892[[rs61028892_2]]/(rs61028892[[rs61028892_0]] + rs61028892[[rs61028892_1]] + rs61028892[[rs61028892_2]])
rs61028892$deletion_grp_frequency = rs61028892[[rs61028892_2]]/(rs61028892[[rs61028892_0]] + rs61028892[[rs61028892_1]] + rs61028892[[rs61028892_2]])
str(rs61028892)
rs61028892$deletion_grp_frequency = rs61028892[["rs61028892_2"]]/(rs61028892[["rs61028892_0"]] + rs61028892[["rs61028892_1"]] + rs61028892[["rs61028892_2"]])
# or rs61028892$deletion_grp_frequency <- rs61028892$rs61028892_2 / (
#  rs61028892$rs61028892_0 + rs61028892$rs61028892_1 + rs61028892$rs61028892_2
#)
ordered_populations = (
rs61028892
%>% arrange( deletion_grp_frequency )
)$population
per_population_posterior$population = factor(
per_population_posterior$population,
levels = ordered_populations
)
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "Deletion allele group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
p
ordered_populations
rs61028892$deletion_grp_frequency = (rs61028892[["rs61028892_2"]] + 10e9)/(rs61028892[["rs61028892_0"]] + rs61028892[["rs61028892_1"]] + rs61028892[["rs61028892_2"]])
# or rs61028892$deletion_grp_frequency <- rs61028892$rs61028892_2 / (
#  rs61028892$rs61028892_0 + rs61028892$rs61028892_1 + rs61028892$rs61028892_2
#)
ordered_populations = (
rs61028892
%>% arrange( deletion_grp_frequency )
)$population
per_population_posterior$population = factor(
per_population_posterior$population,
levels = ordered_populations
)
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "Deletion allele group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
p
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "Deletion allele group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0, size = 10),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "Deletion allele group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0, size = 4),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
# This sets the default plot size for all subsequent chunks in the document
knitr::opts_chunk$set(fig.width = 10, fig.height = 6)
p = (
ggplot( data = per_population_posterior )
+ geom_line( aes( x = at, y = value ))
+ facet_grid(
population ~ .,
# Make y axis facets have their own scales, learnt from the data
scales = "free_y"
)
+ theme_minimal(16)
+ xlab( "Deletion allele group frequency" )
+ ylab( "Posterior density" )
+ theme(
# remove Y axis tick labels
axis.text.y = element_blank(),
# rotate facet labels on right of plot
strip.text.y.right = element_text(angle = 0, hjust = 0, size = 6),
# rotate overall y axis label 90
axis.title.y = element_text(angle = 0, vjust = 0.5)
)
)
print(p)
p
